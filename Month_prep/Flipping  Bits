import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'flippingBits' function below.
     *
     * The function is expected to return a LONG_INTEGER.
     * The function accepts LONG_INTEGER n as parameter.
     */

    public static long flippingBits(long num) {
    // Write your code here
    Stack<Long> st = new Stack<>();
    String s ="";
 
        while (num > 0) {
            st.push(num % 2);
            num = num / 2;
        }
        while (!(st.isEmpty())) {
            s+=st.pop(); 
        }
    int add=32-s.length();
        for(int i=0;i<add;i++){
            s="0"+s;
        }
    String s1="";
    for(int i=0;i<s.length();i++){
        if(s.charAt(i)=='1'){
            s1+="0";
        }
        else{
            s1+="1";
        }
    }
    long sum=0;
    for(int i=0;i<s1.length();i++){
        int v=Character.getNumericValue(s1.charAt(i));
        sum=sum+(long)(v*Math.pow(2,s1.length()-i-1));
    }
      return sum;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, q).forEach(qItr -> {
            try {
                long n = Long.parseLong(bufferedReader.readLine().trim());

                long result = Result.flippingBits(n);

                bufferedWriter.write(String.valueOf(result));
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
